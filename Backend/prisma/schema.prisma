datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String
  image     String?
  addBy     Int?
  addedBy   User?    @relation("UserAdded", fields: [addBy], references: [id])
  addedUsers User[]  @relation("UserAdded") // The opposite side of the relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  foods     Food[]   @relation("FoodAddedBy")
  drinks    Drink[]  @relation("DrinkAddedBy")
  tables    Table[]  @relation("TableAddedBy")
  transactions Transaction[] @relation("TransactionAddedBy")
}

model Food {
  id          Int      @id @default(autoincrement())
  name        String
  details     String?
  price       Float
  image       String?
  isDessert   Boolean  @default(false)
  isSnack     Boolean  @default(false)
  isMainCourse Boolean @default(false)
  addBy       Int?
  addedBy     User?    @relation("FoodAddedBy", fields: [addBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  transactionItems TransactionItem[] @relation("FoodTransactionItems") // Reverse relation to TransactionItem
}

model Drink {
  id          Int      @id @default(autoincrement())
  name        String
  details     String?
  price       Float
  image       String?
  isDessert   Boolean  @default(false)
  isMainCourse Boolean @default(false)
  addBy       Int?
  addedBy     User?    @relation("DrinkAddedBy", fields: [addBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  transactionItems TransactionItem[] @relation("DrinkTransactionItems") // Reverse relation to TransactionItem
}

model Table {
  id          Int      @id @default(autoincrement())
  number      Int      @unique
  isEmpty     Boolean  @default(true)
  image       String?
  addBy       Int?
  addedBy     User?    @relation("TableAddedBy", fields: [addBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions Transaction[] // Reverse relation to Transaction
}

model TransactionItem {
  id             Int      @id @default(autoincrement())
  transactionId  Int
  transaction    Transaction @relation(fields: [transactionId], references: [id])
  
  foodId         Int?   // Nullable if it's a drink item
  drinkId        Int?   // Nullable if it's a food item
  food           Food?  @relation("FoodTransactionItems", fields: [foodId], references: [id])
  drink          Drink? @relation("DrinkTransactionItems", fields: [drinkId], references: [id])

  quantity       Int
  price          Float
}

model Transaction {
  id           Int       @id @default(autoincrement())
  date         DateTime  @default(now())
  customerName String
  total        Float
  status       String     // 'paid' or 'unpaid'
  tableId      Int
  addBy        Int?
  addedBy      User?      @relation("TransactionAddedBy", fields: [addBy], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  items        TransactionItem[] // Relation to TransactionItem
  
  table        Table     @relation(fields: [tableId], references: [id]) // Relation to Table
}